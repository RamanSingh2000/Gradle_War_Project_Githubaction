# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Gradle cicd flow

on:
  push:
    branches: [ "main" ]
  

jobs:

  sonarqube:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: '17'
        distribution: 'adopt'
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -X
          -Dsonar.projectKey=gardle_Github actions 
       
          
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: '17'
        distribution: 'adopt'
        # cache: maven
    
    - name: Unit Testing
      run: gradle test
    - name: Change wrapper permissions
      run: chmod +x gradlew
    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Gradle packages
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: ./gradlew build sonar --info
    - name: Build with Gradle
      run: gradle clean build
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Check Docker Version
      run: docker --version

    - name: Depcheck
      uses: dependency-check/Dependency-Check_Action@main
      env:
        JAVA_HOME: /opt/jdk
      id: Depcheck
      with:
        project: 'Gradle_War_Project_Githubaction'
        path: '.'
        format: 'HTML'
        out: 'reports' # this is the default, no need to specify unless you wish to override it
        args: >
          --failOnCVSS 10
          --enableRetired
    - name: Upload Test results
      uses: actions/upload-artifact@master
      with:
         name: Depcheck report
         path: ${{github.workspace}}/reports

    
    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: ramansingh2000/demo-0.0.1-snapshot
        tags: latest
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Trivy Scan
      uses:  aquasecurity/trivy-action@master
      with:
        image-ref: ramansingh2000/demo-0.0.1-snapshot:latest
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
  # deploy:
  #   needs: build
  #   runs-on: self-hosted
  #   steps:
  #     - name: Pull Image from docker hub
  #       run: sudo docker pull ramansingh2000/demo-0.0.1-SNAPSHOT:latest
  #     - name: Delete old container
  #       run:  sudo docker rm -f springboot-example-container
  #     - name: Run docker container
  #       run: sudo docker run -d -p 8080:8080 --name springboot-example-container ramansingh2000/demo-0.0.1-SNAPSHOT:latest
